"""
### 题目1：数字分组最大和问题

**问题描述**：
给定2n个整数（即输入数字的数量为偶数），需要将这些数字两两组成一组。每组的价值定义为该组中两个数字中的较小值，要求通过合理分组，使所有组的价值总和达到最大。

**输入**：
一行由逗号分隔的2n个整数（n为正整数），代表待分组的数字。

**输出**：
一个整数，表示所有组的价值总和的最大值。

**示例**：
- 输入：1,2,1,3
- 输出：3
- 解释：最佳分组方式为[[1,1],[2,3]]，两组的价值分别为1和2，总和为1+2=3。


**解题思路提示**：
要使总和最大，应让每组中较小的数字尽可能大。通过将所有数字排序后，相邻两个数字为一组，取每组中靠前的数字（即较小的那个）求和，即可得到最大总和。具体步骤：
1. 将输入的数字排序；
2. 从排序后的列表中，每隔一个数字取一个（即取索引为0,2,4,...的元素）；
3. 对这些元素求和，结果即为最大总和。
"""


def run_tests(func, test_cases):
    """通用测试执行器：运行测试用例并输出结果"""
    passed = 0
    total = len(test_cases)
    print(f"开始测试，共 {total} 个测试用例\n")

    for case_idx, (input_data, expected) in enumerate(test_cases, 1):
        try:
            result = func(input_data)
            if result == expected:
                passed += 1
                print(f"测试用例 {case_idx}: ✅ 通过")
            else:
                print(f"测试用例 {case_idx}: ❌ 失败")
                print(f"  输入: {input_data}")
                print(f"  预期: {expected}")
                print(f"  实际: {result}")
        except Exception as e:
            print(f"测试用例 {case_idx}: ⚠️ 异常")
            print(f"  输入: {input_data}")
            print(f"  错误: {str(e)}")
        finally:
            print("-" * 50)

    print(f"\n测试总结: {passed}/{total} 用例通过")
    print("🎉 全部通过！" if passed == total else "💡 请根据失败信息修正代码")


def max_group_sum(nums):
    """计算数字分组的最大和：2n个数字两两分组，每组取较小值，总和最大"""
    nums.sort()
    return sum(nums[::2])


# 无矛盾的测试用例（覆盖各种场景）
test_cases = [
    ([1, 2, 1, 3], 3),  # 基础示例：排序后[1,1,2,3]，1+2=3
    ([5, 4, 3, 2, 1, 6], 9),  # 普通场景：排序后[1,2,3,4,5,6]，1+3+5=9
    ([10, 10], 10),  # 相同数字：排序后[10,10]，取10
    ([1, 3], 1),  # 最小规模：排序后[1,3]，取1
    ([9, 8, 7, 6, 5, 4, 3, 2], 20),  # 8个数字：排序后[2,3,4,5,6,7,8,9]，2+4+6+8=20
    ([], 0),  # 空输入：返回0
    ([2, 1, 4, 3, 6, 5, 8, 7], 16),  # 倒序输入：排序后[1,2,3,4,5,6,7,8]，1+3+5+7=16
    ([-5, -3, -2, -1], -7),  # 全负数：排序后[-5,-3,-2,-1]，-5+(-2)=-7
    ([0, 0, 0, 0], 0),  # 全零：排序后[0,0,0,0]，0+0=0
    ([-1, 2, -3, 4], -1)  # 正负混合：排序后[-3,-1,2,4]，-3+2=-1
]

if __name__ == "__main__":
    run_tests(max_group_sum, test_cases)

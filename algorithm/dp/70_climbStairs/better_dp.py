class Solution(object):
    def climbStairs(self, n):
        """
        :type n: int
        :rtype: int
        优化空间版动态规划
        关于公式：f(x)=f(x−1)+f(x−2)
        可以这么理解，首先确认清楚目的地：
        目的地1：青蛙在只剩一个台阶到达终点
        目的地2：青蛙在只剩两个台阶到达终点
        到达 目的地1 的路线数，我们记做 f(n−1)；
        到达 目的地2 的路线数，我们记做 f(n−2)；
        因为两个目的地不同，所以 f(n−1) 绝对不包含 f(n−2)，即不重复。（一开始我就是这里没想通）

        接下来分析, 从上面两个目的地 到达 终点 的路线数:

        目的地1 到达 终点 的路线数，只能有一个选择，即跳一个台阶，所以只能是 f(n−1)∗1 ，注意不是+1，这里我们求的是路线数。

        目的地2 到达 终点 的路线数，这里有两个选择，即跳一个一个台阶跳 或 一次跳两个台阶，但是我们发现如果选择一个一个台阶跳，会经过上面的目的地1，即重复路线，所以我们也只能有一个选择，即一次跳两个台阶，这时，目的地2 到达 终点 的路线数是 f(n−2)∗1，注意不是+1，这里我们求的是路线数。

        最后：由于一次跳一个台阶或者两个台阶的限制，所以达到终点的前一步，只能可能是从上面两个目的地出发。即得出到达终点的路线数为f(n)=f(n−1)+f(n−2)。

        发散一下：
        明白上面的逻辑之后，你就可以知道，如果这只青蛙一次可以跳1个台阶 或 2个台阶 或 3个台阶的时候，公式怎么写了，如下：
        f(n)=f(n−1)+f(n−2)+f(n−3)
        """
        if n < 2:
            return n
        p, q, r = 1, 1, 0
        for i in range(2, n + 1):
            r = p + q
            p, q = q, r
        return r
